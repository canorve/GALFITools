# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = GALFITools
description =  A library for GALFIT package 
author = Christopher AÃ±orve
author_email = canorve@gmail.com
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/pyscaffold/pyscaffold/
# Add here related links, for example:
project_urls =
    Documentation = https://pyscaffold.org/
    Source = https://github.com/canorve/GALFITools 
    GALFIT = https://users.obs.carnegiescience.edu/peng/work/galfit/galfit.html
#    Changelog = https://pyscaffold.org/en/latest/changelog.html
#    Tracker = https://github.com/pyscaffold/pyscaffold/issues
#    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
#    Download = https://pypi.org/project/PyScaffold/#files
#    Twitter = https://twitter.com/PyScaffold

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = Mac, Linux 

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python
    Development Status :: 5 - Production/Stable
    Framework :: Pytest
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Natural Language :: Spanish
    Natural Language :: English
    Topic :: Scientific/Engineering :: Astronomy


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
# python_requires = >=3.8
 python_requires = >=3.9

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    numpy>=1.22.4
    astropy>=5.1
    matplotlib>=3.5.2  
    scipy>=1.9.1
    mgefit>=5.0.13


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install GALFITools[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
console_scripts =
     getStar = galfitools.shell.commands_galin:mainGetStar
     initGal = galfitools.shell.commands_galin:mainInitGal
     gtmakeMask = galfitools.shell.commands_galin:mainMakeMask
     maskDs9 = galfitools.shell.commands_galin:mainMaskDs9
     maskSky = galfitools.shell.commands_galin:mainMaskSky
     xy2fits = galfitools.shell.commands_galin:mainxy2fits


     getBreak = galfitools.shell.commands_galout:mainGetBreak
     getBreak2 = galfitools.shell.commands_galout:mainGetBreak2
     getFWHM = galfitools.shell.commands_galout:mainFWHM
     getKappa = galfitools.shell.commands_galout:mainKappa
     getReComp = galfitools.shell.commands_galout:mainGetReComp
     getSlope = galfitools.shell.commands_galout:maingetSlope
     getN = galfitools.shell.commands_galout:maingetN
     getMissLight = galfitools.shell.commands_galout:mainMissingLight
     getBulgeRad = galfitools.shell.commands_galout:mainGetBulgeRad
     showCube = galfitools.shell.commands_galout:mainShowCube
     photDs9 = galfitools.shell.commands_galout:mainPhotDs9
     getCOW = galfitools.shell.commands_galout:maingetCOW


     mge2galfit = galfitools.shell.commands_mge:mainMGE
     sbProf = galfitools.shell.commands_mge:mainSbProf

     makeSim = galfitools.shell.commands_sim:mainMakeSim

     galSky = galfitools.shell.commands_sky:mainGalfitSky
     getSky = galfitools.shell.commands_sky:mainSky
     skyDs9 = galfitools.shell.commands_sky:mainSkyDs9
     skyRing = galfitools.shell.commands_sky:mainSkyRing

# For example:
# console_scripts =
#     fibonacci = galfitools.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov galfitools --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.2.1
package = galfitools
extensions =
    no_skeleton
